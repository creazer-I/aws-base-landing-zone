AWSTemplateFormatVersion: 2010-09-09
Description: Account Builder Template for security.
Parameters:
  accountemail:
    Description: "Account Email address"
    Type: String
    AllowedPattern: ".+"
    ConstraintDescription: "Must provide a valid email address"
  ClientName:
    Type: String
    Description: Enter same Client Name when log and security account was created
  accountname:
    Description: "Name of the new AWS Account Name"
    Type: String
    AllowedPattern: ".+"
    ConstraintDescription: "Provide the account name"
    

  organizationunitname:
    Description: "Name of the organization unit to which the account should be moved to."
    Type: String
    Default: "None"
    AllowedPattern: ".+"
  
  OrganizationUnitId:
    Description: "Enter Organization unit ID where log and security account exist"
    Type: String

  sourcebucket:
    Description: "Bucket holding the baseline template file"
    Type: String
    AllowedPattern: ".+"

  Region:
    Type: String
    Description: 'Security Agrregator Stackset Region'
    Default: ap-southeast-1

Resources:
  AccountIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '${accountname}AccountId-${ClientName}'
      Type: String
      Value: !GetAtt TriggerLambda.AccountID
      Description:  !Sub '${accountname} Account ID'
  AggregatorStackset:
    Type: 'AWS::CloudFormation::StackSet'
    DeletionPolicy: Retain
    Properties:
      StackSetName: !Sub security-aggregator-${accountname}-${ClientName}
      Description: Adds Account Id to the security Account
      PermissionModel: SERVICE_MANAGED
      AutoDeployment:
        Enabled: false
      StackInstancesGroup:
        - DeploymentTargets:
            AccountFilterType: INTERSECTION
            OrganizationalUnitIds:
              - !Ref OrganizationUnitId
            Accounts :
              - !Sub '{{resolve:ssm:SecurityAccountId-${ClientName}:1}}'
          Regions:
            - !Ref Region
      ManagedExecution:
        Active: true
      Parameters:
        - ParameterKey: accountId
          ParameterValue: !GetAtt "TriggerLambda.AccountID"
        - ParameterKey: email
          ParameterValue: !Ref accountemail
      TemplateBody: |
          {
              "AWSTemplateFormatVersion": "2010-09-09",
              "Description": "Add Account Id to GuardDuty,Security Hub and Config Aggregator",
              "Parameters": {
                  "accountId": {
                      "Type": "String",
                      "Description": "Enter Account Id"
                  },
                  "email": {
                      "Type": "String",
                      "Description": "Enter Email"
                  }
              },
              "Resources": {
                  "ConfigurationAggregator": {
                      "Type": "AWS::Config::ConfigurationAggregator",
                      "Properties": {
                          "AccountAggregationSources": [
                              {
                                  "AccountIds": [
                                      {
                                          "Ref": "accountId"
                                      }
                                  ],
                                  "AllAwsRegions": true
                              }
                          ]
                      }
                  },
                  "GDMasterMember": {
                      "Type": "AWS::GuardDuty::Member",
                      "Properties": {
                          "Status": "Invited",
                          "MemberId": {
                              "Ref": "accountId"
                          },
                          "Email": {
                              "Ref": "email"
                          },
                          "Message": "You are invited to enable Amazon Guardduty.",
                          "DetectorId": {
                              "Fn::ImportValue": "GuardDutyMasterDetectorId"
                          },
                          "DisableEmailNotification": true
                      }
                  },
                  "SecurityHubMember": {
                      "Type": "AWS::Lambda::Function",
                      "Properties": {
                          "Handler": "index.main",
                          "Runtime": "python3.8",
                          "Role": {
                              "Fn::ImportValue": "LambdaExecuteRole"
                          },
                          "Timeout": 600,
                          "TracingConfig": {
                              "Mode": "Active"
                          },
                          "Code": {
                              "ZipFile": "import json\nimport boto3\nimport os\nimport cfnresponse\n\n\ndef main(event, context):\n  AccountId = os.environ['AccountId']\n  Email = os.environ['Email'] \n  \n  member = addmember(AccountId,Email)\n  \n  dataResponse = { \"Message\": \"Resource create successful!\" }\n\n  cfnresponse.send(event, context, cfnresponse.SUCCESS, dataResponse)\n  \n  \ndef addmember(AccountId,Email):    \n  client = boto3.client('securityhub')\n    \n  response = client.create_members(\n        AccountDetails=[\n            {\n                'AccountId': AccountId,\n                'Email': Email\n            },\n        ]\n    )\n"
                          },
                          "Environment": {
                              "Variables": {
                                  "Email": {
                                      "Ref": "email"
                                  },
                                  "AccountId": {
                                      "Ref": "accountId"
                                  }
                              }
                          }
                      }
                  },
                  "TriggerLambdaSecurityHub": {
                      "Type": "Custom::TriggerLambda",
                      "DeletionPolicy": "Retain",
                      "DependsOn": [
                          "SecurityHubMember"
                      ],
                      "Properties": {
                          "ServiceToken": {
                              "Fn::GetAtt": [
                                  "SecurityHubMember",
                                  "Arn"
                              ]
                          }
                      }
                  }
              }
          }
  enablesecurityhub:
    Type: 'AWS::CloudFormation::StackSet'
    Properties:
      StackSetName: !Sub security-hub-enable-${accountname}-${ClientName}
      Description: Enables Security Hub
      PermissionModel: SERVICE_MANAGED
      AutoDeployment:
        Enabled: false
      StackInstancesGroup:
        - DeploymentTargets:
            AccountFilterType: INTERSECTION
            OrganizationalUnitIds:
              - !Ref OrganizationUnitId
            Accounts :
              - !GetAtt "TriggerLambda.AccountID"
          Regions:
            - !Ref Region
      ManagedExecution:
        Active: true
      TemplateBody: |
        {
            "AWSTemplateFormatVersion": "2010-09-09",
            "Description": "creates Security hub.",
            "Resources": {
                "SecurityHub": {
                    "Type": "AWS::SecurityHub::Hub",
                    "Properties": {
                        "Tags": {
                            "key1": "landingzone",
                            "key2": "true"
                                }
                                    }
                        }
                    }}
  LambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties: 
      Content:
        S3Bucket: !Ref sourcebucket
        S3Key: requests.zip
      Description: Installs requests module
  AccountBuilderLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "AccountCreationLambda.main"
      Runtime: "python3.9"
      Layers: 
        - !Ref LambdaLayer
      Role: !GetAtt LambdaExecuteRole.Arn
      Timeout: 600
      TracingConfig:
        Mode: "Active"
      Code:
        S3Bucket: !Ref sourcebucket
        S3Key: "AccountCreationLambda.zip"
      Environment:
        Variables:
          "accountemail": !Ref accountemail
          "accountname": !Ref accountname
          "organizationunitname": !Ref "organizationunitname"
  LambdaExecuteRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: "Allow"
          Principal:
            Service:
              - "lambda.amazonaws.com"
          Action:
            - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: LambdaAccessRole
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Effect: Allow
              Action: "*"
              Resource: "*"

  TriggerLambda:
    Type: "Custom::TriggerLambda"
    DeletionPolicy: Retain
    DependsOn:
      - AccountBuilderLambda
      - LambdaExecuteRole
    Properties:
      ServiceToken: !GetAtt AccountBuilderLambda.Arn

  
  


Outputs:
  Message:
    Description: Execution Status
    Value: !GetAtt "TriggerLambda.Message"

  AccountID:
    Description: ID of the new account
    Value: !GetAtt "TriggerLambda.AccountID"